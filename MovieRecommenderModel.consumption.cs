// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace MauiApp4
{
    public partial class MovieRecommenderModel
    {
        /// <summary>
        /// model input class for MovieRecommenderModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"userId")]
            public float UserId { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"movieId")]
            public float MovieId { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"rating")]
            public float Rating { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MovieRecommenderModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"userId")]
            public float UserId { get; set; }

            [ColumnName(@"movieId")]
            public float MovieId { get; set; }

            [ColumnName(@"rating")]
            public float Rating { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

#if WINDOWS
        private static string MLNetModelPath => Path.Combine(AppContext.BaseDirectory, "Resources", "MovieRecommenderModel.mlnet");


        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

       
#endif

#if ANDROID



        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine().Result, true);


        private static async Task<PredictionEngine<ModelInput, ModelOutput>> CreatePredictEngine()
        {

            using var stream = await FileSystem.OpenAppPackageFileAsync("MovieRecommenderModel.mlnet");
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(stream, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        

#endif



        public static List<(float MovieId, float Score)> GetTopMovieRecommendations(float userId, int topCount = 15)
        {
            var mlContext = new MLContext();



            var userInput = new ModelInput { UserId = userId, MovieId = 0 };
#if ANDROID
            var predictions = Enumerable.Range(1, 193609)
                .Select(movieId => Predict(new ModelInput { UserId = userId, MovieId = movieId }))
                .Select(prediction => (prediction.MovieId, prediction.Score))
                .OrderByDescending(prediction => prediction.Score)
                .Take(topCount)
                .ToList();

            return predictions;
#endif
#if WINDOWS
            var predictions = Enumerable.Range(1, 193609)
                .Select(movieId => Predict(new ModelInput { UserId = userId, MovieId = movieId }))
                .Select(prediction => (prediction.MovieId, prediction.Score))
                .OrderByDescending(prediction => prediction.Score)
                .Take(topCount)
                .ToList();

            return predictions;
#endif
            return null;
        }

    }
}
